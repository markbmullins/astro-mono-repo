---
interface Props {
  images: {
    image: string;
    alt: string;
    isMain: boolean;
  }[];
}

const { images } = Astro.props;

// Initialize the main image to be the first in the list
const mainImage = images.find((i) => i.isMain)!;
---

<div class="gallery">
  <!-- Main Image Display -->
  <div class="main-image">
    <img id="mainImage" src={mainImage.image} alt={mainImage.alt} />
  </div>

  <!-- Thumbnail Images -->
  <div class="thumbnails">
    {
      images.map((image, index) => (
        <img
          src={image.image}
          alt={image.alt}
          class={`thumbnail ${index === 0 ? "active" : ""}`}
          id={`thumbnail-${index}`}
          data-index={index}
        />
      ))
    }
  </div>
</div>

<script define:vars={{ images }}>
  (function () {
    console.log("images", images);
    const thumbnails = document.querySelectorAll(".thumbnail");
    const mainImage = document.getElementById("mainImage");

    let currentIndex = 0;
    let slideshowInterval = null;
    const SLIDE_DURATION = 3000; // 3 seconds

    // Function to update the main image
    function updateMainImage(index) {
      const { image, alt } = images[index];
      mainImage.src = image;
      mainImage.alt = alt;

      // Update active thumbnail styling
      thumbnails.forEach((thumb, idx) => {
        if (idx === index) {
          thumb.classList.add("active");
        } else {
          thumb.classList.remove("active");
        }
      });

      currentIndex = index;
    }

    // Function to start the slideshow
    function startSlideshow() {
      slideshowInterval = setInterval(() => {
        let nextIndex = (currentIndex + 1) % images.length;
        updateMainImage(nextIndex);
      }, SLIDE_DURATION);
    }

    // Function to stop the slideshow
    function stopSlideshow() {
      if (slideshowInterval) {
        clearInterval(slideshowInterval);
        slideshowInterval = null;
      }
    }

    // Initialize the slideshow
    startSlideshow();

    // Add click event listeners to thumbnails
    thumbnails.forEach((thumbnail) => {
      thumbnail.addEventListener("click", () => {
        const index = parseInt(thumbnail.getAttribute("data-index") || "0", 10);
        updateMainImage(index);
        stopSlideshow(); // Stop the automatic cycling on user interaction
      });
    });
  })();
</script>

<style>
  .gallery {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .main-image {
    width: 100%;
    max-width: 800px;
    aspect-ratio: 3 / 2;
    overflow: hidden;
  }

  .main-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
  }

  .thumbnails {
    display: flex;
    gap: 8px;
    margin-top: 0.5rem;
    overflow-x: auto; /* Allows thumbnails to scroll on smaller screens */
    padding: 8px;
    width: 100%;
    justify-content: center;
  }

  .thumbnail {
    width: 80px;
    cursor: pointer;
    transition:
      transform 0.1s ease-in-out,
      border-color 0.1s ease-in-out;
    border: 2px solid transparent;
    border-radius: 4px;
    margin-bottom: 0.5rem;
  }

  .thumbnail:hover {
    transform: scale(1.1);
    border-color: #666;
  }

  .thumbnail.active {
    border-color: #333;
    transform: scale(1.05);
  }

  .thumbnail.active:hover {
    border-color: #333;
    transform: scale(1.05);
  }

  /* Larger screens */
  @media (min-width: 768px) {
    .gallery {
      flex-direction: row;
    }

    .main-image {
      flex: 2;
      margin-right: 16px;
    }

    .thumbnails {
      flex-direction: column;
      width: auto;
      gap: 8px;
    }

    .thumbnail {
      width: 150px;
    }
  }
</style>
